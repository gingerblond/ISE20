{"remainingRequest":"C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\src\\components\\Reports.vue?vue&type=template&id=ef92e782&scoped=true&","dependencies":[{"path":"C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\src\\components\\Reports.vue","mtime":1610481893729},{"path":"C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610313755472},{"path":"C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1610313859424},{"path":"C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1610313755472},{"path":"C:\\Users\\Elly\\Desktop\\ISE_10.01.2020\\ISE20\\hotel\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1610313859415}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}