{"remainingRequest":"D:\\MyProjects\\ISE20\\hotel\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\MyProjects\\ISE20\\hotel\\frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\MyProjects\\ISE20\\hotel\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MyProjects\\ISE20\\hotel\\frontend\\src\\components\\ReservationForm.vue?vue&type=template&id=243c70b0&scoped=true&","dependencies":[{"path":"D:\\MyProjects\\ISE20\\hotel\\frontend\\src\\components\\ReservationForm.vue","mtime":1610304391839},{"path":"D:\\MyProjects\\ISE20\\hotel\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyProjects\\ISE20\\hotel\\frontend\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\MyProjects\\ISE20\\hotel\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyProjects\\ISE20\\hotel\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}